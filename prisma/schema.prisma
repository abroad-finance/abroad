// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Partner {
  id        String        @id @default(uuid())
  name      String
  createdAt DateTime      @default(now())
  apiKey    String        @unique
  users     PartnerUser[]
  quotes    Quote[]
}

model PartnerUser {
  id          String        @id @default(uuid())
  partnerId   String
  partner     Partner       @relation(fields: [partnerId], references: [id])
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transaction Transaction[]
  kycStatus   KycStatus     @default(PENDING)

  // Unique constraint to ensure a user is only once per partner
  @@unique([partnerId, userId])
}

model Quote {
  id             String            @id @default(uuid())
  targetAmount   Float
  sourceAmount   Float
  targetCurrency TargetCurrency
  paymentMethod  PaymentMethod
  country        Country
  cryptoCurrency CryptoCurrency
  network        BlockchainNetwork

  partnerId String
  partner   Partner @relation(fields: [partnerId], references: [id])

  expirationDate DateTime
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  transaction    Transaction?

  @@index([partnerId])
}

model Transaction {
  id            String            @id @default(uuid())
  partnerUserId String
  partnerUser   PartnerUser       @relation(fields: [partnerUserId], references: [id])
  accountNumber String
  status        TransactionStatus
  createdAt     DateTime          @default(now())
  quoteId       String            @unique
  quote         Quote             @relation(fields: [quoteId], references: [id])
  onChainId     String?           @unique
}

model StellarListenerState {
  id              String   @id @default("singleton")
  lastPagingToken String
  updatedAt       DateTime @updatedAt
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
  PENDING_APPROVAL
}

enum TransactionStatus {
  AWAITING_PAYMENT
  PROCESSING_PAYMENT
  PAYMENT_FAILED
  PAYMENT_COMPLETED
  WRONG_AMOUNT
}

enum CryptoCurrency {
  USDC
}

enum BlockchainNetwork {
  STELLAR
}

enum Country {
  CO
}

enum PaymentMethod {
  NEQUI
  MOVII
}

enum TargetCurrency {
  COP
}
