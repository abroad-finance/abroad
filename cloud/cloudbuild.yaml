steps:
  # 1. Build the image, tagging :$COMMIT_SHA and :latest, and point BuildKit at the pulled cache
  - id: Build
    name: gcr.io/cloud-builders/docker
    env:
      - DOCKER_BUILDKIT=1
      - BUILDKIT_INLINE_CACHE=1
    args:
      - build
      - -t
      - $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
      - -t
      - $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:latest
      - -f
      - Dockerfile
      - .
    waitFor: ["-"]

  # 2. Push both tags so this build becomes the next buildâ€™s cache source
  - id: Push commit
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
    waitFor: ["Build"]

  - id: Push latest
    name: gcr.io/cloud-builders/docker
    args:
      - push
      - $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:latest
    waitFor: ["Build"]

  # 3. Render kustomization (runs in parallel; unchanged)
  - id: Substitute kustomization
    name: debian:stable-slim
    entrypoint: bash
    args:
      - -c
      - |
        apt-get update -qq && apt-get install -y gettext-base --no-install-recommends -qq || true
        envsubst < k8s/kustomization.yaml > k8s/kustomization.processed.yaml
        mv k8s/kustomization.processed.yaml k8s/kustomization.yaml
    env:
      - PROJECT_ID=$PROJECT_ID
      - COMMIT_SHA=$COMMIT_SHA
      - REPO_NAME=$REPO_NAME
      - _SERVICE_NAME=$_SERVICE_NAME
    waitFor: ["-"]

  # 4. Apply database migrations with the freshly-built image
  - id: Migrate
    name: $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
    entrypoint: npx
    args: ["prisma", "migrate", "deploy"]
    secretEnv: ["DATABASE_URL"]
    waitFor: ["Push commit"]

  # 5. Deploy to Cloud Run after migrations
  - id: Deploy Cloud Run
    name: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
    entrypoint: gcloud
    args:
      - run
      - services
      - update
      - $_SERVICE_NAME
      - --platform=managed
      - --image=$_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
      - --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID,gcb-trigger-id=$_TRIGGER_ID
      - --region=$_DEPLOY_REGION
      - --quiet
    waitFor: ["Migrate"]

  # 6. Deploy to GKE (after manifests & migrations)
  - id: Deploy GKE workloads
    name: gcr.io/cloud-builders/kubectl
    env:
      - CLOUDSDK_COMPUTE_REGION=$_DEPLOY_REGION
      - CLOUDSDK_CONTAINER_CLUSTER=$_GKE_CLUSTER
      - PROJECT_ID=$PROJECT_ID
    args: ["apply", "-k", "k8s"]
    waitFor: ["Substitute kustomization", "Migrate"]

  # 7. Wait for listener and consumer rollouts
  - id: Verify GKE rollouts
    name: gcr.io/cloud-builders/kubectl
    entrypoint: bash
    env:
      - CLOUDSDK_COMPUTE_REGION=$_DEPLOY_REGION
      - CLOUDSDK_CONTAINER_CLUSTER=$_GKE_CLUSTER
      - PROJECT_ID=$PROJECT_ID
    args:
      - -c
      - |
        kubectl rollout status deployment/abroad-listeners
        kubectl rollout status deployment/abroad-consumers
    waitFor: ["Deploy GKE workloads"]

images:
  - $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:$COMMIT_SHA
  - $_AR_HOSTNAME/$PROJECT_ID/cloud-run-source-deploy/$REPO_NAME/$_SERVICE_NAME:latest

options:
  substitutionOption: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY
  machineType: E2_HIGHCPU_8

substitutions:
  _DEPLOY_REGION: us-east1
  _AR_HOSTNAME: us-east1-docker.pkg.dev
  _PLATFORM: managed
  _SERVICE_NAME: abroad-api
  _TRIGGER_ID: ""
  _GKE_CLUSTER: ""

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - abroad-api

availableSecrets:
  secretManager:
    - versionName: projects/$PROJECT_ID/secrets/DATABASE_URL/versions/latest
      env: DATABASE_URL
